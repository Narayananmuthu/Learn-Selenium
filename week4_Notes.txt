Week4 Day1 and Day2: 31/07/2021
AGENDA:

1. Alerts
2. disable notifications
3. Implicitly wait
4. Frames
5. WindowHandling
6. TakeScreenShot
7. Actions 
8. WebTable
9. Explicitly wait
10. Dynamic Xpath
11. for each loop
12. findElements()
13. CarWale testcase explained

ALERT:
What is an Alert?
   - POPUP dialog box
   - warning, message, ask me a small confirmation
   - Web based pop up 
(egs)
1. Axis retail banking (Right click)

Types:
1. Modal Dialog
2. Non Modal dialog(Sweet Alert)


1. Modal dialog
****************
  -- We cannot inspect the alert( cannot right-click)
       (Because alerts are javaScript alerts (not found in DOM))
  -- We cannot interact with the main page, untill the alert is handled

Types of Modal dialog:
---------------------
1. Simple alert        --  OK             void accept(); 
2. Confirmation Alert  --  Ok, Cancel -   void dismiss(); 
3. Prompt Alert        --  textBox,   -  void sendKeys(String keysToSend);
                          Ok, cancel
                       -- String getText() 
                          - To get the text from the alert box

How do handle an alert?
-----------------------
-- try to inspect : findElement() - can this be used? NO
-- javaScript Alert and not found in DOM
-- dirver.switchTo.alert()
    Switches to the currently active modal dialog for this particular driver instance.
    Returns the handle to the dialog.
-- Handle using the Interface -- Alert
   Implementation class of Alert interface --> RemoteAlert, EventFiringAlert
Ok                   --> accept()  --> return - void  (Positive actions)
cancel               --> dismiss()--> return - void   (Negative actions)
To enter the text    --> sendKeys()--> return - void
To get the text(msg) --> getText() --> returns String


ALERT EXCEPTIONS:
----------------
1)
// Throws org.openqa.selenium.NoAlertPresentException
      * If the dialog cannot be found
      * Occurs when trying to interact with the alert that is not active curently

2)
// org.openqa.selenium.UnhandledAlertException
       Occurs when Alert is still alive and	
       I try to access the main window


2. Non-Modal Dialog:(sweet Alert)
*********************************

egs: IRCTC, tatcliq

https://www.tatacliq.com/
      https://www.irctc.co.in/nget/train-search

// Handled as a normal webElement
// Can write Xpath
// Can use findElement()


*************************************
ClassRoom for Alerts in LeafGrounds : 
  First three cases alone
**************************************


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

FRAMES:
-------

-- DOM inside a DOM

How to identify a Frame is present?
1. look for iframes or frames tag in your DOM
2. Right Click -> You can find someoptions wrt frames

How does it appear in DOM?

1. <iframe> -- inline frame (floating frame)
2. <frame>  -- static frame/immovable

http://www.leafground.com/pages/frame.html

What if my element is inside a frame and try to access it without enetering the frame?

ClickMe -- first option
Throws Exception: NoSuchElementException
             

// How to access the frame?
1. Select my frame through index 
2. Select my frame attribute -- id/name

3. Select my frame as normal as a webelement (Xpath)	


// number of frames:
  look for the elements with the tagname iframe
  Returned as List
  Get the size of the list


RETURNING THE CONROL TO THE PREVIOUS LEVELS :
DefaultContent -- Frame2 control to main DOM  (Top of the DOM)
parentFrame    -- Frame2 to Frame1 ( One level higher)

To think:

In case 3, to find the number of frames, it returns 3. 
But in the DOM, it gives 7 when searched. 
WHY?

EXCEPTIONS OF FRAMES:

NoSuchFrameException
     (NoSuchElementException) - element is loaded in the DOM. But not visible
    

ClassRoom for Alerts and Frames:
--------------------------------

https://www.w3schools.com/js/tryit.asp?filename=tryjs_confirm
Click Try It Button
Click OK/Cancel in the alert
Confirm the action is performed correctly by verifying the text !!
 Hint:
-----
Switch to the frame
Then click Try It with xpath
Switch to the alert
Then perform accept / dismiss
Get the text using id 
Verify the text based on the action


Assignment: 
1. serviceNow
2. https://chercher.tech/practice/frames-example-selenium-webdriver


**********************************************************************************************
WINDOW HANDLING:

webelements: locators (unique)
frames : index / nameor Id/ webElement
windows :

title
URL
index
id
<a>
href

What is a window handle? 
A window handle is a unique identifier that holds the address of all the windows. 
This is basically a pointer to a window, which returns the string value. 
This window handle function helps in getting the handles of all the windows.
 It is guaranteed that each browser will have a unique window handle.


getWindowhandle(): helps in getting the window handle of the current window
getWindowhandles(): helps in getting the handles of all the windows opened

Three steps :
Step 1: get all the window handles as using driver.getWindowHandles()
Step 2: Convert the Set to List
Step 3: switch to the required window using the list.get()

Set<String> winSet = driver.getWindowHandles();   
List<String> winList = new ArrayList<String>(winSet);
driver.switchTo().window(winList.get(1)); // to goto the second window


**********************************************************
-- set

How do you confirm the order of windows

Array
  
List

Set

cant we have list directly

***********************************************************************
driver.close();   - closes the current active window

driver.quit();  - closes all the related windows

Methods needed to handle multiple windows:

Exceptions:
org.openqa.selenium.NoSuchWindowException: 

 org.openqa.selenium.NoSuchSessionException: Session ID is null. Using WebDriver after calling quit()?

Alerts and Window handling
---------------------------
1. Load https://www.irctc.co.in/
2. Click on OK button in the dialog  
3. Click on FLIGHTS link            
4. Go to the Flights tab( second window)
5. Print the customer care email id
6. Close the First tab(Train ticket booking) alone

findElements
forEach
possible to highlight field value of the webelement

screenshot

TAKE SCREEN SHOT of the current window:
--------------------------------------
Takes the screenshot of the visible portion of the window.

	 File src1 = driver.getScreenshotAs(OutputType.FILE);
	 File dst = new File("./snaps/seat.png");
	 FileUtils.copyFile(src1, dst);

**************************************************************************

QA Session:
Interview Question:
can a page has multiple alerts?
Can we take a screen shot of the Alert?

By implicitly waiting, 
   WebDriver polls the DOM for a certain duration when trying to find any element. 
   This can be useful when certain elements on the webpage are not available immediately and need some time to load.
   The default setting is 0, meaning disabled. Once set, the implicit wait is set for the life of the session.

findElement()
findElements()

       alpha 6:  driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
       alpha 7:  driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));


**************************************************

https://forms.gle/scnVRUthPG2HdhDR7


WebTable :
---------
findElements()
forEach loop

table - complete table
tbody - table body
tr - table row
th - table header
td - table data (column)

Mthd 1: 
Access the table using Xpaths

Mthd2:

1. Find the table
2. Get into the row 
3. From the row, reach each column

WebTable - ClassRoom
// step 1 : find the table
// step 2: Get all the rows
// get the number of rows in the table
// get the number of columns
// print all the contents of the table
// print the contents of column 2 alone
http://www.leafground.com/pages/table.html

Actions :
----------
1. MouseHover
      https://www.myntra.com/
-- Locate the webElement 
-- builder.moveToElement(webMen).perform();

2. DragandDrop
    builder.dragAndDrop(source,target).perform();

3. DropandDropBy
    builder.dragAndDropBy(drag, 100, 100).perform();

4. DoubleClick
    builder.doubleClick(findElement).perform();

5. RightClick
   builder.contextClick().perform();

6. Selectable
		
	builder.clickAndHold(item1).moveToElement(item5).release().perform();

	builder.keyDown(Keys.CONTROL).click(item1).click(item5).click(item3).keyUp		(Keys.CONTROL).perform();

7. Sortable 
	https://jqueryui.com/sortable/
-- get the locator for the webelemnt to be moved ( item1)
-- Get the location of the target item using getLocation() item5 -
-- Get the x and y co-ordinates

	builder.dragAndDropBy(item1, x, y).perform();
	builder.clickAndHold(item1).moveByOffset(x, y).release().perform();

8. Select all the contents ( control A)

	builder.keyDown(Keys.CONTROL).sendKeys("a").keyUp(Keys.CONTROL).perform();

Dynamic Xpath:

Get the complete row for " LearnLocators"


//table//td[text()='Learn Locators']/following-sibling::td

//table//td[text()='Learn to interact with Elements']/following-sibling::td

//table//td[text()='Learn XPath']/following-sibling::td

String str = "Learn Locators";

//table//td[text()='Learn Locators']/following-sibling::td
"//table//td[text()='"+str+"']/following-sibling::td"

        +str+

Waits:

Selenium Waits:
1. Implicitly wait:
2. Explicitly Wait:

   polling time : 500 milliSecs

3. Fluent Wait
;





























